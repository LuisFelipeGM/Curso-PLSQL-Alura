-- DEFINIÇÃO DE CURSOR:
-- CURSOR É UMA ESTRUTURA IMPLEMENTADA NO ORACLE QUE PERMITE UMA INTERATIVIDADE
-- LINHA A LINHA ATRAVÉS DE UMA DETERMINADA ORDEM

-- USANDO CURSOR PARA PUXAR AS INFORMAÇÕES DO CLIENTE
SET SERVEROUTPUT ON

DECLARE
    V_ID CLIENTE.ID%TYPE;
    V_RAZAO CLIENTE.RAZAO_SOCIAL%TYPE;
    CURSOR CUR_CLIENTE IS SELECT ID, RAZAO_SOCIAL FROM CLIENTE ORDER BY ID;
BEGIN
    OPEN CUR_CLIENTE;
    LOOP
        FETCH CUR_CLIENTE INTO V_ID, V_RAZAO;
        
    -- ESSA EXPRESSAO QUER DIZER QUE VAI REALIZAR O LOOP ATÉ ACABAR O CONTEUDO DO CURSOR
    EXIT WHEN CUR_CLIENTE%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID = ' || V_ID || ' RAZAO = ' || V_RAZAO);
    END LOOP;
    CLOSE CUR_CLIENTE;
END;

--------------------------------------------------------------
-- ATUALIZANDO SEGMENTO USANDO CURSOR COM LOOP E END LOOP

DECLARE
    V_SEGMERCADO CLIENTE.SEGMERCADO_ID%TYPE := 3;
    V_ID CLIENTE.ID%TYPE;
    CURSOR CUR_CLIENTE IS SELECT ID FROM CLIENTE;
BEGIN
    OPEN CUR_CLIENTE;
    LOOP
        FETCH CUR_CLIENTE INTO V_ID;
        EXIT WHEN CUR_CLIENTE%NOTFOUND;
        ATUALIZAR_SEGMERCADO(V_ID, V_SEGMERCADO);
    END LOOP;
    CLOSE CUR_CLIENTE;
END;

SELECT * FROM CLIENTE;

--------------------------------------------------------------
-- ATUALIZANDO SEGMENTO USANDO CURSOR COM WHILE E CONDIÇÃO FOUND

DECLARE
    V_SEGMERCADO CLIENTE.SEGMERCADO_ID%TYPE := 3;
    V_ID CLIENTE.ID%TYPE;
    CURSOR CUR_CLIENTE IS SELECT ID FROM CLIENTE;
BEGIN
    OPEN CUR_CLIENTE;
    FETCH CUR_CLIENTE INTO V_ID;
    WHILE CUR_CLIENTE%FOUND LOOP
        ATUALIZAR_SEGMERCADO(V_ID, V_SEGMERCADO);
        FETCH CUR_CLIENTE INTO V_ID;
    END LOOP;
    CLOSE CUR_CLIENTE;
END;

SELECT * FROM CLIENTE;


--------------------------------------------------------------
-- ATUALIZANDO SEGMENTO USANDO CURSOR COM FOR

DECLARE
    V_SEGMERCADO CLIENTE.SEGMERCADO_ID%TYPE := 1;
    CURSOR CUR_CLIENTE IS SELECT ID FROM CLIENTE;
BEGIN
    -- É POSSIVEL USAR O CURSOR DIRETO NA CONDIÇÃO DO LAÇO FOR E
    -- NÃO É NECESSARIO ABRIR NEM FECHAR O CURSOR
    FOR V_LINHA_CUR_CLIENTE IN CUR_CLIENTE LOOP
        ATUALIZAR_SEGMERCADO(V_LINHA_CUR_CLIENTE.ID, V_SEGMERCADO);
    END LOOP;
END;

SELECT * FROM CLIENTE;

-- COM O FOR NÃO É PRECISO ABRIR NEM FECHAR O CURSOR, E NÃO É NECESSARIO USAR O
-- FETCH PARA MUDAR A LINHA DO CURSOR SENDO ASSIM O MAIS OTIMIZADO

--------------------------------------------------------------
-- FAZENDO EXERCICIOS DA AULA
-- EX 1

CREATE TABLE TAB_FETCH
(ID INTEGER, NOME VARCHAR(10), VALOR VARCHAR(10));
INSERT INTO TAB_FETCH VALUES (1,'PRODUTO1',10);
INSERT INTO TAB_FETCH VALUES (2,'PRODUTO2',10);
INSERT INTO TAB_FETCH VALUES (3,'PRODUTO3',10);
INSERT INTO TAB_FETCH VALUES (4,'PRODUTO4',10);
INSERT INTO TAB_FETCH VALUES (5,'PRODUTO5',10);
INSERT INTO TAB_FETCH VALUES (6,'PRODUTO6',10);
INSERT INTO TAB_FETCH VALUES (7,'PRODUTO7',10);
INSERT INTO TAB_FETCH VALUES (8,'PRODUTO8',10);
INSERT INTO TAB_FETCH VALUES (9,'PRODUTO9',10);

DECLARE
    V_NOME TAB_FETCH.NOME%TYPE;
    V_VALOR TAB_FETCH.VALOR%TYPE;
    V_VALOR_ACUMULATIVO FLOAT := 0;
    CURSOR CUR_TAB_FETCH IS SELECT NOME, VALOR FROM TAB_FETCH WHERE MOD(ID,2) = 0 ORDER BY ID;
BEGIN
    OPEN CUR_TAB_FETCH;
    FETCH CUR_TAB_FETCH INTO V_NOME, V_VALOR;
    LOOP
        V_VALOR_ACUMULATIVO := V_VALOR_ACUMULATIVO + V_VALOR;
    EXIT WHEN V_VALOR_ACUMULATIVO >= 30;
        FETCH CUR_TAB_FETCH INTO V_NOME, V_VALOR;
    END LOOP;
    CLOSE CUR_TAB_FETCH;
    DBMS_OUTPUT.PUT_LINE('VALOR DO PRODUTO = ' || V_NOME);
END;

--------------------------------------------------------------
-- EX 2
-- Aplique o uso de CURSOR para evitar identificadores de vendas na tabela 
-- PRODUTO_VENDA_EXERCICIO que fujam da ordem sequencial numérica.

create or replace PROCEDURE SOMA_VENDAS_CURSOR
(p_VENDA_LIMITE IN produto_venda_exercicio.valor_total%type, p_ID_RETORNO OUT produto_venda_exercicio.id%type)
IS
   v_ID produto_venda_exercicio.id%type;
   v_VALOR_TOTAL produto_venda_exercicio.valor_total%type;
   v_VENDA_TOTAL produto_venda_exercicio.valor_total%type := 0;
   CURSOR CUR_SOMA_VENDAS IS SELECT ID FROM PRODUTO_VENDA_EXERCICIO;
BEGIN
    OPEN CUR_SOMA_VENDAS;
    LOOP
        FETCH CUR_SOMA_VENDAS INTO v_ID;
        SELECT VALOR_TOTAL INTO v_VALOR_TOTAL FROM PRODUTO_VENDA_EXERCICIO WHERE ID = v_ID;
        v_VENDA_TOTAL := v_VENDA_TOTAL + v_VALOR_TOTAL;
        IF v_VENDA_TOTAL >= p_VENDA_LIMITE THEN
            EXIT;
        END IF;
        EXIT WHEN CUR_SOMA_VENDAS%NOTFOUND;
    END LOOP;
    p_ID_RETORNO := v_ID;
    CLOSE CUR_SOMA_VENDAS;
END;

-- TESTANDO

SET SERVEROUTPUT ON;
DECLARE
   v_NUM INTEGER;
BEGIN
   SOMA_VENDAS_CURSOR(20000, v_NUM);
   dbms_output.put_line(v_NUM);
END;


--------------------------------------------------------------
-- EX 3
-- Modifique-o para usar WHILE. Chame a procedure de SOMA_VENDAS_CURSOR_WHILE

create or replace PROCEDURE SOMA_VENDAS_CURSOR_WHILE
(p_VENDA_LIMITE IN produto_venda_exercicio.valor_total%type, p_ID_RETORNO OUT produto_venda_exercicio.id%type)
IS
   V_ID produto_venda_exercicio.id%type;
   V_VALOR_TOTAL produto_venda_exercicio.valor_total%type;
   V_VENDA_TOTAL produto_venda_exercicio.valor_total%type := 0;
   CURSOR CUR_SOMA_VENDAS IS SELECT ID FROM PRODUTO_VENDA_EXERCICIO;
BEGIN
    OPEN CUR_SOMA_VENDAS;
    FETCH CUR_SOMA_VENDAS INTO v_ID;
        WHILE ((V_VENDA_TOTAL < P_VENDA_LIMITE) AND CUR_SOMA_VENDAS%FOUND) LOOP
            SELECT VALOR_TOTAL INTO v_VALOR_TOTAL FROM PRODUTO_VENDA_EXERCICIO WHERE ID = v_ID;
            v_VENDA_TOTAL := v_VENDA_TOTAL + v_VALOR_TOTAL;
            IF V_VENDA_TOTAL < P_VENDA_LIMITE THEN
                FETCH CUR_SOMA_VENDAS INTO v_ID;
            END IF;
        END LOOP;
    P_ID_RETORNO := V_ID;
    CLOSE CUR_SOMA_VENDAS;
END;

-- TESTANDO

SET SERVEROUTPUT ON;
DECLARE
   v_NUM INTEGER;
BEGIN
   SOMA_VENDAS_CURSOR_WHILE(20000, v_NUM);
   dbms_output.put_line(v_NUM);
END;


--------------------------------------------------------------
-- EX 4
-- Modifique-o para usar FOR e chame a procedure de SOMA_VENDAS_CURSOR_FOR.

create or replace PROCEDURE SOMA_VENDAS_CURSOR_FOR
(p_VENDA_LIMITE IN produto_venda_exercicio.valor_total%type, p_ID_RETORNO OUT produto_venda_exercicio.id%type)
IS
   V_ID produto_venda_exercicio.id%type;
   V_VALOR_TOTAL produto_venda_exercicio.valor_total%type;
   V_VENDA_TOTAL produto_venda_exercicio.valor_total%type := 0;
   CURSOR CUR_SOMA_VENDAS IS SELECT ID FROM PRODUTO_VENDA_EXERCICIO;
BEGIN
    FOR X IN CUR_SOMA_VENDAS LOOP
        V_ID := X.ID;
        SELECT VALOR_TOTAL INTO v_VALOR_TOTAL FROM PRODUTO_VENDA_EXERCICIO WHERE ID = v_ID;
        v_VENDA_TOTAL := v_VENDA_TOTAL + v_VALOR_TOTAL;
        IF v_VENDA_TOTAL >= p_VENDA_LIMITE THEN
            EXIT;
        END IF;
    END LOOP;
    P_ID_RETORNO := V_ID;
END;

-- TESTE

SET SERVEROUTPUT ON;
DECLARE
   v_NUM INTEGER;
BEGIN
   SOMA_VENDAS_CURSOR_FOR(20000, v_NUM);
   dbms_output.put_line(v_NUM);
END;

